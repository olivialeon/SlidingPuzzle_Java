package edu.wm.cs.cs301.slidingpuzzle;

import edu.wm.cs.cs301.slidingpuzzle.PuzzleState;
import java.util.Random;

public class SimplePuzzleState implements PuzzleState {
	
		// creates private to store information 
		private PuzzleState parent;
		private Operation operation;
		private int pathLength;
		private int[][] PuzzleBoard;
		
		public void setOperation(Operation op) {
      operation = op;
		}
		public void setPathLength(int pathLen){
			pathLength = pathLen;
		}
		public void setParent( PuzzleState par){
			parent = par;
		}
		
//		private class Tile{
//			public int x;
//			public int y;
//			public int value; 
//			
//				
//			public Tile(int x, int y, int value){
//				this.x = x;
//				this.y = y;
//				this.value = value;
//			}
//			
//			public int getValue(){
//				return value;
//			}
//		}
		
		public void PuzzleState() {
			// 2D array to store the tiles 
			PuzzleBoard = null;
			parent = null;
			operation = null;
			pathLength = 0;

		}

	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {
		
		//initiate puzzle state 
		parent = null;
		operation = null;
		pathLength = 0; 
		
		//Initializes 2D array by placing values on tiles 
		PuzzleBoard = new int[dimension][dimension];
		for ( int r = 0; r < dimension; r++) {
			for ( int c = 0; c < dimension; c++) {
				PuzzleBoard[r][c] = (int) (r * dimension + c +1) ;
			}
		}
		
		//set the number of empty slots, should be the bottom right for 1
		//then for 2 continuing empty slots to the left of previous empty
		// for 1 empty slot [3,3], for 2 [3,3] and [3,2] for 3 the previous 2 & [3,1]
		if (numberOfEmptySlots == 1) {
			PuzzleBoard[dimension-1][dimension-1] = 0;
		}
		if (numberOfEmptySlots == 2) {
			PuzzleBoard[dimension-1][dimension-1]= 0;
			PuzzleBoard[dimension-1][dimension-2]=  0;
		}
		if (numberOfEmptySlots == 3) {
			PuzzleBoard[dimension-1][dimension-1]= 0; 
			PuzzleBoard[dimension-1][dimension-2]= 0;
			PuzzleBoard[dimension-1][dimension-3] = 0;
			
		}
		
	}

	@Override
	public int getValue(int row, int column) {
		return PuzzleBoard[row][column];
	}

	@Override
	public PuzzleState getParent() {
		return parent; 
	}

	@Override
	public Operation getOperation() {
		return operation;
	}

	@Override
	public int getPathLength() {
		return pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		
		// with each case check if the tile next to it is empty to make move
		//if so return the new state 
		
		SimplePuzzleState ps2= new SimplePuzzleState(); 
		ps2.PuzzleBoard = new int[row][column];
		
		switch (op){
		case MOVERIGHT: 
			if  ( isEmpty(row + 0, column +1) == true){
				int newposition = ps2.PuzzleBoard[row][column];
				ps2.setParent(this);
				ps2.PuzzleBoard[row][column]= 0;
				ps2.PuzzleBoard[row + 0][column +1]= newposition;
				ps2.setOperation(op);
				ps2.setPathLength(this.pathLength + 1);
				return ps2;
				//ps2.PuzzleBoard[row][column] = PuzzleBoard[row + 0][column + 1]; 
				//Tile newposition = PuzzleBoard[row][column];
				///PuzzleBoard[row][column] = PuzzleBoard[row + 0][column + 1];
				//PuzzleBoard[row + 0][column + 1] = ps2.PuzzleBoard[row][column]; 
			}
			
			break;
		case MOVELEFT:
			if  ( isEmpty(row + 0, column -1) == true){
				int newposition = ps2.PuzzleBoard[row][column];
				ps2.setParent(this);
				ps2.PuzzleBoard[row][column]= 0;
				ps2.PuzzleBoard[row + 0][column -1]= newposition;
				ps2.setOperation(op);
				ps2.setPathLength(this.pathLength + 1);
				return ps2;
			}
			break;
		case MOVEUP:
			if  ( isEmpty(row - 1, column + 0 ) == true){
				int newposition = ps2.PuzzleBoard[row][column];
				ps2.setParent(this);
				ps2.PuzzleBoard[row][column]= 0;
				ps2.PuzzleBoard[row -1 ][column + 0]= newposition;
				ps2.setOperation(op);
				ps2.setPathLength(this.pathLength + 1);
				return ps2;
			}
			break;
		case MOVEDOWN:
			if  ( isEmpty(row + 1 , column + 0) == true){
				int newposition = ps2.PuzzleBoard[row][column];
				ps2.setParent(this);
				ps2.PuzzleBoard[row][column]= 0;
				ps2.PuzzleBoard[row + 1][column + 0]= newposition;
				ps2.setOperation(op);
				ps2.setPathLength(this.pathLength + 1);
				return ps2;
			}
			break;
		} 
		
	return null;
	}

	@Override
	public PuzzleState drag(int startRow, int startColumn, int endRow, int endColumn) {
	// TODO Auto-generated method stub
	return null;
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
	// TODO Auto-generated method stub
	return null;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		if (PuzzleBoard[row][column] == 0 ){
			return true;
		}
		return false; 
	}
 
	@Override
	public PuzzleState getStateWithShortestPath() {
	// TODO Auto-generated method stub
	return null;
	}
	
	@Override
	public int hashCode(){
		int hash = 17;
	return hash;
		
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if ( getClass() != obj.getClass())
			return false;
		SimplePuzzleState other = (SimplePuzzleState) obj;
	return true;
	}
}

